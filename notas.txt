def I = \x:E. x
def K = \x:E.\y:E.x
def S = \x:E->E->E.\y:E->E.\z:E.(x z) (y z)

Ejercicio 1:
x: E -> E -> E
y: E -> E
z: E

\x. \y. \z. (x z) (y z)

x : E->E->E \in g           z : E \in g              y : E->E \in g          z : E \in g
------------------- T-Var ---------------T-Var      ----------------- T-Var ------------- T-Var
g |- x : E->E->E             g |- z :E                g |- y : E->E           g |- z : E
------------------------------------------ T-App    ------------------------------------- T-App
         g |- (x z) : E -> E                                  g |- (y z) : E 
--------------------------------------------------------------------------------- T-App
          g@(x : E -> E -> E, y: E -> E, z : E) |- (x z) (y z) : E
--------------------------------------------------------------------------------- T-Abs
           x : E -> E -> E, y: E -> E |- \z:E.(x z) (y z): E -> E
--------------------------------------------------------------------------------- T-Abs
      x : E -> E -> E |- \y:E->E.\z:E.(x z) (y z) : (E -> E) -> E -> E
--------------------------------------------------------------------------------- T-Abs
  |- \x:E->E->E.\y:E->E.\z:E.(x z) (y z) : (E -> E -> E) -> (E -> E) -> E -> E


Ejercicio 2:

La función infer retorna un valor del tipo Either String Type
porque en caso de que haya un error de tipo, se devuelve
un String indicando cuál fue el error.

Funcionamiento de >>=:
Se utiliza para aplicar una función a un tipo, pero en el caso de que el 
argumento sea un error este se sigue pasando y si es un tipo se aplica la función.

Ejercicio 5:

      x : E \in x : E
     ---------------- T-Var
       x : E |- x : E
---------------------------- T-Abs
   |- λx : E. x : E -> E                            z : E -> E \in z : E -> E
------------------------------------ T-Ascribe    ---------------------------- T-Var
 |- (λx : E. x) as E → E : E -> E                   z : E -> E |- z : E - > E
--------------------------------------------------------------------------------- T-Let
            |- let z = ((λx : E. x) as E → E) in z : E -> E
---------------------------------------------------------------------------------- T-Ascribe
        |- (let z = ((λx : E. x) as E → E) in z) as E → E : E -> E


Ejercicio 7:

    t1 -> t1'
--------------------  E-Pair1
 (t1, t2) -> (t1', t2)

    t2 -> t2'
-------------------- E-Pair2
 (v, t2) -> (v, t2')

     t -> t'
------------------ E-Fst
 fst t -> fst t'

     t -> t'
----------------- E-Snd
 snd t -> snd t'

fst (v1, v2) -> v1    E-Fst1
snd (v1, v2) -> v2    E-Snd1



Ejercicio 9:
                                          x : (E, E) \in x : (E, E)
                                        ----------------------------- T-Var
                                             x : (E, E) |- x : (E, E)
---------------- T-Unit                  ---------------------------- T-Snd
  |- unit : Unit                             x : (E, E) |- snd x : E
----------------------- T-Ascribe   --------------------------------------- T-Abs
  |- unit as Unit : Unit               |- \x : (E, E). snd x : (E, E) -> E
----------------------------------------------------------------------------- T-Pair
          |- (unit as Unit, \x : (E,E). snd x) : (Unit, (E, E) -> E)
-------------------------------------------------- ------------------------------T-Fst
              |- fst (unit as Unit, \x : (E,E). snd x) : Unit











-- ack m n = \m:Nat.\n:Nat. (R succ t2 m) n

-- ack 0 n = (R succ t2 0) n <- E-RZero
--         = succ n

-- ack (succ m) 0 = (R succ t2 (Succ m)) 0
--                = t2 (R succ t2 m) m 0

-- ack (succ m) n = (R succ t2 (Succ m)) n
--                = t2 (R succ t2 m) m n

-- t2 = b = \(ack m-1) (m-1). \n. R ((ack m-1) (succ zero)) () n 

-- ack 0 n = n + 1
-- ack m 0 = ack (m-1) 1
-- ack m n = ack (m-1) (ack m (n-1))





-- suma = R (\y.y) (\s x. \y. succ (s y))

-- R a b

-- f 0 = a
-- f (succ n) = b (f n) n

-- b = (\s x. \y. succ (s y))
-- (f n) = s = (suma zero)
-- n = 

-- suma 0 y = y
-- suma (succ x) y = succ (suma x y)

-- suma 1 1 = (R (\y.y) (\s x. \y. succ (s y)) (succ zero)) (succ zero)
--          = (\y. succ (suma zero y)) (succ zero)
--          = succ (suma zero (succ zero))
--          = succ ((\y. y) (succ zero))
--          = succ (succ zero) = 2 :) tkm
 